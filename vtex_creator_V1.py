import shutil
from pathlib import Path

input_dir = Path(input("Folder with textures: "))
output_dir = Path(input("Output folder: "))
material_path = Path(input("Material path prefix: "))

for file in filter(lambda p: p.suffix in {".tga", ".png",'.mks'}, input_dir.rglob("*")):  # Scan all files in the directory with .tga  extension
    if not (output_dir / file.name).exists():
        shutil.copy2(file, output_dir)
    with (output_dir / file.name).with_suffix('.vtex').open('w') as f:
        f.write('<!-- dmx encoding keyvalues2_noids 1 format vtex 1 -->\n')
        f.write('"CDmeVtex"\n')
        f.write('{\n')
        f.write('	"m_inputTextureArray" "element_array" \n')
        f.write('	[\n')
        f.write('		"CDmeInputTexture"\n')
        f.write('		{\n')
        f.write('			"m_name" "string" "0"\n')
        f.write(f'			"m_fileName" "string" "{material_path.as_posix()}/{file.name}')
        f.write('"\n			"m_colorSpace" "string" "srgb"\n')
        f.write('			"m_typeString" "string" "2D"\n')
        f.write('		}\n')
        f.write('	]\n')
        f.write('	"m_outputTypeString" "string" "2D"\n')
        f.write('	"m_outputFormat" "string" "DXT5"\n')
        f.write('	"m_textureOutputChannelArray" "element_array"\n')
        f.write('	[\n')
        f.write('		"CDmeTextureOutputChannel"\n')
        f.write('		{\n')
        f.write('			"m_inputTextureArray" "string_array"\n')
        f.write('				[\n')
        f.write('					"0"\n')
        f.write('				]\n')
        f.write('			"m_srcChannels" "string" "rgba"\n')
        f.write('			"m_dstChannels" "string" "rgba"\n')
        f.write('			"m_mipAlgorithm" "CDmeImageProcessor"\n')
        f.write('			{\n')
        f.write('				"m_algorithm" "string" ""\n')
        f.write('				"m_stringArg" "string" ""\n')
        f.write('				"m_vFloat4Arg" "vector4" "0 0 0 0"\n')
        f.write('			}\n')
        f.write('			"m_outputColorSpace" "string" "srgb"\n')
        f.write('		}\n')
        f.write('	]\n')
        f.write('}')
        f.close()
